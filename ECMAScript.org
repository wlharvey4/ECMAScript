# -*- mode: org; fill-column: 79; -*-
#+Title:ECMAScript 262
#+Date:2019-05-24 09:57
#+macro:version 0.1.3

* ECMAScript Description

  The ECMAScript specification is a standardized specification of a scripting
  language developed by Brendan Eich of Netscape.

  ECMAScript is a scripting language specification standardized by ECMA
  International in ECMA-262 and ISO/IEC 16262.  It was created to standardize
  JavaScript (``Spidermonkey''), so as to foster multiple independent
  implementations.  Other implementations include
  - JScript (Microsoft)
  - ActionScript (Macromedia Inc.; Adobe)


  ECMAScript is *object-based*: basic language and host facilities are provided
  by /objects/, and an ECMAScript program is a cluster of communicating
  objects.  An ECMAScript *object* is a collection of /properties/ each with
  zero or more /attributes/ that determine how each property can be used.
  *Properties* are containers that hold other objects, primitive values, or
  functions.  A *primitive value* is a member of one of the following built-in
  types:
  - Undefined
  - Null
  - Boolean
  - Number
  - String


  An *object* is a member of the remaining built-in type
  - Object


  And a *function* is a /callable object/.  A *method* is a function that is associated with
  an object via a property.

  ECMAScript defines a collection of *built-in objects* that round out the
  definition of ECMAScript entities.  These built-in objects include:
  - the global object
  - the Object object
  - the Function object
  - the Array object
  - the String object
  - the Boolean object
  - the Number object
  - the Math object
  - the Date object
  - the RegExp object
  - the JSON object
  - the Error objects
    - EvalError
    - RangeError
    - ReferenceError
    - SyntaxError
    - TypeError
    - URIError


  ECMAScript also defines a set of *built-in operators*.  ECMAScript operators
  include:
  - unary operators
  - multiplicative operators
  - additive operators
  - bitwise shift operators
  - relational operators
  - equality operators
  - binary bitwise operators
  - binary logical operators
  - assignment operators
  - comma operator


  *ECMAScript syntax* intentionally resembles Java syntax. ECMAScript syntax is
  relaxed to enable it to serve as an easy-to-use scripting language.

** Version Numbers

   | Year | JavaScript | ECMA   | Browser            |
   |      | <c>        | <c>    |                    |
   |------+------------+--------+--------------------|
   | 1996 | 1.0        |        | Netscape 2         |
   | 1997 |            | ES1    | IE 4               |
   | 1998 | 1.3        |        | Netscape 4         |
   | 1999 |            | ES2    | IE 5               |
   | 2000 |            | ES3    | IE 5.5             |
   | 2000 | 1.5        |        | Firefox 1          |
   | 2011 |            | ES5    | IE 9[fn:1]         |
   | 2011 | 1.8.5      |        | Firefox 4[fn:2]    |
   | 2012 |            |        | IE 10              |
   | 2012 |            |        | Chrome 23          |
   | 2012 |            |        | Safari 6           |
   | 2013 |            |        | Firefox 21         |
   | 2013 |            |        | Opera 15           |
   | 2015 |            | ES2015 | All browsers[fn:3] |
   |------+------------+--------+--------------------|

** ECMAScript History

   - 1993 ::
     - NCSA’s *Mosaic* was the first widely popular web browser.

   - 1994 ::
     - a company called *Netscape* was founded to exploit the potential of the
       nascent World Wide Web.
     - Netscape created the proprietary web browser *Netscape Navigator*,
     - Many of the original Mosaic authors went on to work on Navigator, but
       the two intentionally shared no code.
     - Netscape quickly realized that the Web needed to become more dynamic.

   - 1995 ::
     - Netscape hired *Brendan Eich* with the promise of letting him implement
       Scheme (a Lisp dialect) in the browser.
     - Before he could get started, Netscape collaborated with hardware and
       software company *Sun* (since bought by Oracle) to include its more
       static programming language, *Java*, in Navigator.
     - As a consequence, a hotly debated question at Netscape was why the Web
       needed two programming languages: Java and a scripting language.
     - Netscape management decided that a scripting language had to have a
       syntax similar to Java’s.
     - That ruled out adopting existing languages such as Perl, Python, TCL, or
       Scheme.
     - To defend the idea of JavaScript against competing proposals, Netscape
       needed a prototype. Eich wrote one in 10 days.
     - JavaScript’s first code name was *"Mocha"*.
     - Netscape marketing later changed it to *"LiveScript"*, for trademark
       reasons and because the names of several products already had the prefix
       “Live.”
     - In late November 1995, *Navigator 2.0B3* came out and included the
       prototype, which continued its early existence without major changes.
     - In early December 1995, Java’s momentum had grown and the language was
       renamed again, to its final name, *JavaScript*.

   - 1996 ::
     - *Microsoft* implemented the same language, under the different
       name *JScript*, in Internet Explorer 3.0
     - Partially to keep Microsoft in check, Netscape decided to standardize
       JavaScript and asked the standards organization *Ecma International* to
       host the standard.
     - Work on a specification called *ECMA-262* started.
     - Because Sun (now Oracle) had a trademark on the term JavaScript, it
       couldn’t be the official name of the language to be standardized. Hence,
       *ECMAScript* was chosen, derived from JavaScript and Ecma.
     - However, that name is used only to refer to versions of the language
       (where one refers to the specification).  Everyone still calls the
       language *JavaScript*.
     - *ECMA-262* is managed and evolved by Ecma’s *Technical Committee 39
       (TC39)*.

   - 1997 ::
     - ECMAScript 1 *First Edition*
     - *Dynamic HTML*: allows you to dynamically change the content and
       appearance of a web page, achieved by manipulating the Document Object
       Model (DOM) of the page, a tree-shaped data structure.  Things that can
       be done include: changing content, changing style, and showing and
       hiding elements.  First in Internet Explorer 4 and in Netscape
       Navigator 4.

   - 1998 ::
     - ECMAScript 2 --- Editorial changes to align ECMA-262 with the standard
       ISO/IEC 16262

   - 1999 ::
     - ECMAScript 3 --- ~do-while~, regular expressions, new string methods
       (~concat~, ~match~, ~replace~, ~slice~, ~split~ with a regular
       expression, etc.), exception handling, and more
     - *XMLHttpRequest*: lets a client-side script send an HTTP or HTTPS
       request to a server and get back data, usually in a text format (XML,
       HTML, JSON).  Introduced in Internet Explorer 5.

   - 2001 ::
     - *JSON*: a JavaScript-based data exchange format.  *Douglas Crockford*
       named and documented JSON (JavaScript Object Notation), whose main idea
       is to use JavaScript syntax to store data in text format.  JSON uses
       JavaScript literals for objects, arrays, strings, numbers, and booleans
       to represent structured data.

   - 2004 ::
     - *Dojo Toolkit*: a framework for programming JavaScript in the large.
       The Dojo Toolkit facilitates programming in the large by providing the
       necessary infrastructure: an inheritance library, a module system, an
       API for desktop-style graphical widgets, and more.
       - https://dojotoolkit.org
       - https://github.com/dojo/dojo

   - 2005 ::
     - *AJAX* (/Asynchronous JavaScript and XML/): browser-based desktop-class
       applications.  Ajax is a collection of technologies that brings a level
       of interactivity to web pages that rivals that of desktop applications.
       The two cornerstones of Ajax are:
       1. loading content asynchronously in the background (via
          ~XMLHttpRequest~); and
       2. dynamically updating the current page with the results (via /dynamic
          HTML/).

       [[https://www.adaptivepath.com/ideas/ajax-new-approach-web-applications/][Ajax: A New Approach to Web Applications]] February 18, 2005 | By Jesse
       James Garrett

       Ajax marked the mainstream breakthrough of JavaScript and dynamic web
       applications.  It is interesting to note how long that took—at that
       point, the Ajax ingredients had been available for years.  Since the
       inception of Ajax, other data formats have become popular (JSON instead
       of XML), other protocols are used (e.g., Web Sockets in addition to
       HTTP), and bidirectional communication is possible. But the basic
       techniques are still the same.

       The term Ajax is used much less these days and has mostly been replaced
       by the more comprehensive terms *HTML5* and *Web Platform* (which both
       mean /JavaScript plus browser APIs/).

     - *Apache CouchDB*: a JavaScript-centric database.  Roughly, CouchDB is a
       JSON database: you feed it JSON objects, without the need to specify a
       schema in advance. Additionally, you can define views and indexes via
       JavaScript functions that perform map/reduce operations. Hence, CouchDB
       is a very good fit for JavaScript because you can work directly with
       native data.  Compared to a /relational database/, there is no
       mapping-related impedance mismatch.  Compared to an /object database/,
       you avoid many complications because only data is stored, not behavior.

       CouchDB is just one of several similar *NoSQL databases*.  Most of them
       have excellent JavaScript support.

       - http://couchdb.apache.org
       - https://github.com/apache/couchdb

   - 2006 ::
     - *jQuery*: helping with DOM manipulation.  The browser DOM is one of the
       most painful parts of client-side web development.  jQuery made DOM
       manipulation fun by abstracting over browser differences and by
       providing a powerful fluent-style API for querying and modifying the
       DOM.

   - 2007 ::
     - *WebKit*: aking the mobile web mainstream.  Based on prior work by KDE,
       WebKit is an /HTML engine/ that was introduced by Apple in 2003.  It was
       open-sourced in 2005.  With the introduction of the iPhone in 2007, the
       mobile Web suddenly became mainstream and had little to no limitations
       compared to the nonmobile Web.

   - 2008 ::
     - ECMAScript 4 (Abandoned)

       ECMAScript 4 was developed as the next version of JavaScript, with a
       prototype written in ML.  However, TC39 could not agree on its feature
       set.  To prevent an impasse, the committee met at the end of July 2008
       and came to an accord, summarized in four points:

       1. Develop an incremental update of ECMAScript 3 (which became
          *ECMAScript 5*).

       2. Develop a major new version that does less than ECMAScript 4, but
          much more than the incremental update of ECMAScript 3. The code name
          for the new version is *Harmony*, due to the nature of the meeting in
          which it was conceived.  Harmony will be split into ECMAScript 6 and
          ECMAScript 7.

       3. Features from ECMAScript 4 that would be *dropped* included
          /packages/, /namespaces/, and /early binding/.

       4. Other ideas were to be developed in consensus with all of TC39.

       Thus, the ECMAScript 4 developers agreed to make Harmony less radical
       than ECMAScript 4, and the rest of TC39 agreed to keep moving things
       forward.

   - *V8*: proving JavaScript can be fast.  When Google introduced its Chrome
     web browser, one of its highlights was a fast JavaScript engine called V8.
     It changed the perception of JavaScript as being slow and led to a speed
     race with other browser vendors from which we are still profiting.  V8 is
     open source and can be used as a standalone component whenever you need a
     fast embedded language that is widely known.

   - 2009 ::
     - ECMAScript 5 --- Adds a strict mode, getters and setters, new array
       methods, support for JSON, and more

     - *Node.js*: implementing JavaScript on the server.  Created by Ryan Dahl,
       Node.js lets you implement servers that perform well under load.  To do
       so, it uses /event-driven/, /nonblocking I/O/ and /JavaScript/ (via V8).
       JavaScript was chosen for some of the following reasons:
       - “Because it’s bare and does not come with I/O APIs.” [Node.js can thus
         introduce its own nonblocking APIs.]
       - “Web developers use it already.” [JavaScript is a widely known
         language, especially in a web context.]
       - “DOM API is event-based.  Everyone is already used to running without
         threads and on an event loop.” [Developers are used to an asynchronous
         coding style.]

       The appeal of Node.js for JavaScript programmers goes beyond being able
       to program in a familiar language; you get to use the same language on
       both client and server.  That means you can share more code (e.g., for
       validating data) and use techniques such as isomorphic
       JavaScript. Isomorphic JavaScript is about assembling web pages on
       either client or server, with numerous benefits: pages can be rendered
       on the server for faster initial display, SEO, and running on browsers
       that either don’t support JavaScript or a version that is too old. But
       they can also be updated on the client, resulting in a more responsive
       user interface.

     - *PhoneGap*: writing native apps in HTML5.  The initial mission of
       PhoneGap was to make it possible to implement native mobile apps via
       HTML5. Since then, support has expanded to nonmobile operating
       systems. Currently supported platforms include Android, Bada,
       BlackBerry, Firefox OS, iOS, Mac OS X, Tizen, Ubuntu, Windows (desktop),
       and Windows Phone.

     - *Chrome OS*: making the browser the operating system.  With Chrome OS,
       the web platform is the native platform. This approach has several
       advantages:
       - It is much easier to create an operating system, because all of the
         user interface technology is already there.
       - Many developers already (mostly) know how to write apps for the
         operating system.
       - Managing apps is simple. That helps public installations such as
         Internet cafes and schools.

   - 2011 ::
     - ECMAScript 5.1 --- Editorial changes to align ECMA-262 with the third
       edition of the international standard ISO/IEC 16262:2011

     - *Windows 8*: first-class HTML5 apps.  Microsoft's Windows 8 has
       extensive integration with HTML5.  HTML5 applications are first-class
       citizens in Windows 8, on par with those implemented via incumbent
       technologies such as .NET and C++.

   - 2015 ::
     - ECMAScript 6
     - renamed to *ECMAScript 2015*
     - and *ES2015*
     - many new features added

   - 2016 ::
     - *ECMAScript 2016* (7th Edition)
     - exponentiation operator; ~Array.prototype.includes()~

   - 2017 ::
     - *ECMAScript 2017* (8th Edition)
     - concurrency; atomics; ~async/await~

   - 2018 ::
     - *ECMAScript 2018* (9th Edition)
     - asynchronous iteration and generators; new RegExp features; rest/spread
       parameters

** CommonJS

   The dominant incarnation of this standard is *Node.js modules* (Node.js
   modules have a few features that go beyond CJS).

   - http://www.commonjs.org
   - http://wiki.commonjs.org/wiki/CommonJS [fn:4]

   JavaScript is a powerful object oriented language with some of the fastest
   dynamic language interpreters around.  The official JavaScript specification
   defines APIs for some objects that are useful for building browser-based
   applications.  *However, the spec does not define a standard library that is
   useful for building a broader range of applications*.

   The CommonJS API will fill that gap by *defining APIs that handle many
   common application needs*, ultimately providing a standard library as rich
   as those of Python, Ruby and Java.  The intention is that an application
   developer will be able to write an application using the CommonJS APIs and
   then run that application across different JavaScript interpreters and host
   environments.

   With CommonJS-compliant systems, you can use JavaScript to write:

   - Server-side JavaScript applications
   - Command line tools
   - Desktop GUI-based applications
   - Hybrid applications (Titanium, Adobe AIR)

   [[https://arstechnica.com/information-technology/2009/12/commonjs-effort-sets-javascript-on-path-for-world-domination/][CommonJS effort sets JavaScript on path for world domination]] KRIS KOWAL -
   12/1/2009, 9:19 PM

* ECMAScript Specifications

  [[http://www.ecma-international.org/publications/standards/Ecma-262.htm][Current edition]].

  The first edition of ECMA-262 was adopted by the Ecma General Assembly in
  June 1997.  [[http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm][Historical standards]].

** Edition 1

   June 1997.  [[https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%25201st%2520edition,%2520June%25201997.pdf][First edition]]

   Netscape 2 was the first browser to run JavaScript.  After Netscape the
   Mozilla foundation continued to develop JavaScript for the Firefox browser.

** Edition 2

   June 1998.  [[https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%25202nd%2520edition,%2520August%25201998.pdf][2nd Edition]]

   Editorial changes.x

** Edition 3

   December 1999.  [[https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%25203rd%2520edition,%2520December%25201999.pdf][3rd Edition]] PDF

   ECMAScript 3 is fully supported in all browsers.

   - Regular expressions
   - better string handling
   - new control statements
   - try/catch exception handling
   - tighter definition of errors
   - formatting for numeric output

** Edition 4

   Abandoned.

** Edition 5

   December 2009.  [[https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262%25205th%2520edition%2520December%25202009.pdf][5th Edition]] PDF

   ECMAScript 5 is fully supported in all /modern/ browsers.

   - [[http://kangax.github.io/compat-table/es5/][ES5 compatibility table]]
   - [[https://github.com/es-shims/es5-shim][es5-shim]]

   Codifies de facto interpretations of the language specification that have
   become common among browser implementations and adds support for new
   features that have emerged since the publication of the third edition.

   - strict mode that provides enhanced error checking and program security ::

        'use strict' directive defines that the JavaScript code should be
        executed in "strict mode".

        ECMAScript defines a strict variant of the language. The
        strict variant of the language excludes some specific syntactic and
        semantic features of the regular ECMAScript language and modifies the
        detailed semantics of some features.  The strict variant also specifies
        additional error conditions that must be reported by throwing error
        exceptions in situations that are not specified as errors by the
        non-strict form of the language.

        Strict mode selection and use of the strict mode syntax and semantics
        of ECMAScript is explicitly made at the level of individual ECMAScript
        code units.  Because strict mode is selected at the level of a
        syntactic code unit, strict mode only imposes restrictions that have
        local effect within such a code unit.

   - ambiguities clarified ::

   - accessor properties---getters and setters ::

        Getters and setters allow the programnmer to implement the getting and
        setting of a property via methods.

   - syntactic changes ::

        ECMAScript 5 includes the following syntactic changes:

     + Reserved words as property keys; the programmer can use reserved words
       (such as ~new~ and ~function~) after the dot operator and as unquoted
       property keys in object literals.

     + Legal trailing commas

     + Multiline string literals using a trailing backslash (=/=)

   - New Functionality in the Standard Library ::

     + *Metaprogramming* (reflective creation and inspection of objects)

       - Getting and setting prototypes

         - ~Object.create()~

         - ~Object.getPrototypeOf()~

       - Managing property attributes via property descriptors (program control
         of property attributes)

         - ~Object.defineProperty()~

         - ~Object.defineProperties()~

         - ~Object.create()~

         - ~Object.getOwnPropertyDescriptor()~

       - Listing properties

         - ~Object.keys()~

         - ~Object.getOwnPropertyNames()~

       - Protecting objects

         - ~Object.preventExtensions()~

         - ~Object.isExtensible()~

         - ~Object.seal()~

         - ~Object.isSealed()~

         - ~Object.freeze()~

         - ~Object.isFrozen()~

       - New Function method

         - ~Function.prototype.bind()~

     + *New Methods*

       - on Strings

         - ~String.prototype.trim()~

         - Access characters via the bracket operator =[...]=

       - on Arrays

         - ~Array.isArray()~

         - ~Array.prototype.every()~

         - ~Array.prototype.filter()~

         - ~Array.prototype.forEach()~

         - ~Array.prototype.indexOf()~

         - ~Array.prototype.lastIndexOf()~

         - ~Array.prototype.map()~

         - ~Array.prototype.reduce()~

         - ~Array.prototype.some()~

       - on Dates

         - ~Date.now()~

         - ~Date.prototype.toISOString()~

     + JSON library support

       - ~JSON.parse()~

       - ~JSON.stringify()~

       - Some built-in objects have special toJSON() methods:

         - ~Boolean.prototype.toJSON()~

         - ~Number.prototype.toJSON()~

         - ~String.prototype.toJSON()~

         - ~Date.prototype.toJSON()~

** Edition 5.1

   June 2011.  [[http://www.ecma-international.org/ecma-262/5.1/index.html#Title][ECMAScript 5.1]] HTML

   Fully aligned with third edition of the international standard ISO/IEC
   16262:2011.

** Edition 6 --- ECMAScript 2015 (ES 6) (ES2015)

   June 2015.  [[http://www.ecma-international.org/ecma-262/6.0/index.html#Title][ECMAScript 2015 (ES2015)]]

   Internet Explorer does not support ECMAScript 2015.

   The sixth edition was initially known as ECMAScript 6 (ES6) and later
   renamed to ECMAScript 2015 (ES2015).

   #+BEGIN_QUOTE
   ECMAScript 5 is a nice and decent programming language, of course. But
   because of its history, it has some nasty aspects which ECMAScript 6 finally
   resolves.... ECMAScript 6's language design is cleaner than ECMAScript 5,
   its syntax increases the expressiveness of your code, it decreases the
   necessary boilerplate code (e.g. function vs. arrow syntax) and it
   especially let you get rid of some very nasty but required hacks and
   workarounds from the ECMAScript 5 era (e.g. ~var self = this~).

   --- Dr. Ralf S. Engelschall
   #+END_QUOTE

   - ~let~ and ~const~ declarations
   - exponentiation operator =**=
   - default parameter values
   - number and math enhancements,
     - new =Number= properties
       - =EPSILON=
       - =MIN_SAFE_INTEGER=
       - =MAX_SAFE_INTEGER=
     - new =Number= methods
       - ~Number.isInteger()~
       - ~Number.isSafeInteger()~
   - new library methods on =Array=
     - ~Array.find()~
     - ~Array.findIndex()~
   - new global methods
     - ~isFinite()~
     - ~isNaN()~
   - significant new syntax for writing complex applications, defined
     semantically in the same terms as ECMAScript 5 strict mode:
     + classes
     + modules
   - iterators
   - for/of loops
   - Python-style generators and generator expressions
   - arrow functions
     - allow a short syntax for writing function expressions
     - do not have their own =this=
     - are not hoisted
     - use =const= instead of =var= because a function expression is always a
       constant
   - binary data
   - typed arrays
   - collections
     + maps
     + sets
     + weak maps
   - promises
   - reflection
   - proxies (metaprogramming for virtual objects and wrappers)
   - template literals

** Edition 7 --- ES2016

   June 2016.  [[http://www.ecma-international.org/ecma-262/7.0/index.html#Title][ECMAScript 2016 (ES2016)]]

   - exponentiation operator (~**~)
   - ~Array.prototype.includes~

** Edition 8 --- ES2017

   June 2017.  [[http://www.ecma-international.org/ecma-262/8.0/index.html#Title][ECMAScript 2017 (ES2017)]]

   - concurrency
   - atomics
   - async/await (syntactic integration with promises )

** Edition 9 --- ES2018

   June 2018.  [[http://www.ecma-international.org/ecma-262/9.0/index.html#Title][ECMAScript 2018 (ES2018)]]

   - features for asynchronous iteration and generators
   - new regular expression features
   - rest/spread parameters

** Edition 10 --- ES2020 (Draft)

   March 2019.  [[https://tc39.github.io/ecma262/][ECMAScript 2020 (Draft)]]

* ECMAScript 3 Features

* ECMAScript 5 Features

* ECMAScript 2015 (ES6) Features

  - http://es6-features.org/
  - https://github.com/rse/es6-features

** Constants

** Scoping

** Arrow Functions

** Extended Parameter Handling

** Template Literals

** Extended Literals

** Enhanced Regular Expression

** Enhanced Object Properties

** Destructuring Assignment

** Modules

** Classes

** Symbol Type

** Iterators

** Generators

** Map/Set & WeakMap/WeakSet

** Typed Arrays

** New Built-In Methods

** Promises

** Meta-Programming

** Internationalization & Localization

* ECMAScript compatibility table

  - http://kangax.github.io/compat-table/es6/

  Notice the column "Babel + core-js" as this is what can be achieved today
  with transpiling (and that's fully sufficient for practice).

* ECMAScript Books

  - *[[http://speakingjs.com/es5/index.html][Speaking JavaScript: An In-Depth Guide for Programmers]]* by Dr. Axel
    Rauschmayer March 2014

    This book covers JavaScript up to and including ECMAScript 5.  The book’s
    target audience is programmers who want to learn JavaScript quickly and
    properly, and JavaScript programmers who want to deepen their skills and/or
    look up specific topics.

  - *[[http://exploringjs.com/impatient-js/toc.html][JavaScript for impatient programmers]]* by Dr. Axel Rauschmayer 2019

    This book makes JavaScript less challenging to learn for newcomers, by
    offering a modern view that is as consistent as possible.

    - Test-driven exercises and quizzes available for most chapters.
    - Covers all essential features of JavaScript, up to and including ES2019.
    - Optional advanced sections let you dig deeper.

  - *[[http://exploringjs.com/es6/index.html][Exploring ES6]]* by Dr. Axel Rauschmayer 2018-05-11

    The most comprehensive book on ECMAScript 6 (ECMAScript 2015); a book for
    people who already know JavaScript.

  - *Setting up ES6* by Dr. Axel Rauschmayer 

    This book explains how to set up ES6 projects that are compiled to ES5 via
    Babel 6.  You should already know ES6. It covers the following scenarios:

    - Deploying ES6 in browsers via Babel and webpack.
    - Deploying ES6 in Node.js, by statically or dynamically compiling it via
      Babel.

  - *[[http://exploringjs.com/es2016-es2017/index.html][Exploring ES2016 and ES2017]]* by Dr. Axel Rauschmayer 2018

    Covers what’s new in ECMAScript 2016 and ECMAScript 2017.

  - *[[http://exploringjs.com/es2018-es2019/toc.html][Exploring ES2018 and ES2019]]* by Dr. Axel Rauschmayer 2019
p
    Covers what’s new in ECMAScript 2018 and ECMAScript 2019.

* JavaScript---The Definitive Guide
:PROPERTIES:
:author:   David Flanagan
:published: 2011
:publisher: O'Reilly Media
:END:
- http://shop.oreilly.com/product/9780596805531.do
- [[https://resources.oreilly.com/examples/9780596805531/][Example Code]]
- [[https://www.oreilly.com/catalog/errata.csp?isbn=9780596805531][Errata]]

Since 1996, /JavaScript: The Definitive Guide/ has been the bible for
JavaScript programmers---a programmer's guide and comprehensive reference to the
core language and to the client-side JavaScript APIs defined by web browsers.

The 6th edition covers HTML5 and ECMAScript 5.  Many chapters have been
completely rewritten to bring them in line with today's best web development
practices.  New chapters in this edition document jQuery and server side
JavaScript.  It's recommended for experienced programmers who want to learn the
programming language of the Web, and for current JavaScript programmers who
want to master it.

This book covers the JavaScript language and the JavaScript APIs implemented by
web browsers.  It was written for programmers who already use JavaScript but
want to take their understanding to a new level and really master the language
and the web platform.  The goal with this book is to document the JavaScript
language and platform comprehensively and definitively.  It will reward careful
study, and that the time you spend reading it will be easily recouped in the
form of higher programming productivity.

{{{heading(How This Book Is Organized)}}}
This book is divided into four parts.

- Part I covers the JavaScript language itself.
- Part II covers client-side JavaScript: the JavaScript APIs defined by HTML5
  and related standards and implemented by web browsers.
- Part III is the reference section for the core language,
- Part IV is the reference for client-side JavaScript.


This sixth edition of the book covers both:

- ECMAScript 5 (the latest version of the core language) and
- HTML5 (the latest version of the web platform)

** Introduction to JavaScript
:PROPERTIES:
:chapter:  One
:END:
JavaScript is part of the triad of technologies that all Web developers must
learn:

- HTML to specify the /content/ of web pages
- CSS to specify the /presentation/ of web pages, and
- JavaScript to specify the /behavior/ of web pages.


JavaScript is:

- a high-level,
- dynamic,
- untyped
- interpreted
- programming language

that is well-suited to:

- /object-oriented/ and
- /functional/

programming styles.  JavaScript derives:

- its /syntax/ from *Java*,
- its /first-class functions/ from *Scheme*, and
- its /prototype-based inheritance/ from *Self*.


JavaScript has long since outgrown its scripting-language roots to become a
robust and efficient general-purpose language.  The latest version of the
language defines new features for serious large-scale software development.

*** Some History of JavaScript the Name
JavaScript is completely different from the Java programming language.  “Java-
Script” is a trademark licensed from Sun Microsystems (now Oracle) used to
describe Netscape’s (now Mozilla’s) implementation of the language.

Netscape submitted the language for standardization to ECMA---the European
Computer Manufacturer’s Association---and because of trademark issues, the
standardized version of the language was stuck with the awkward name
“ECMAScript.”  Microsoft’s version of the language is formally known as
“JScript.”  This book uses the name “ECMAScript” only to refer to the language
standard.

*** About Versions
For the last decade[fn:5], all web browsers have implemented version 3 of the
ECMAScript standard and there has really been no need to think about version
numbers: the lan- guage standard was stable and browser implementations of the
language were, for the most part, interoperable.

Recently, an important new version of the language has been defined as
ECMAScript version 5 and, at the time of this writing, browsers are beginning
to implement it.  This book covers all the new features of ECMAScript 5 as well
as all the long-standing features of ECMAScript 3.  You’ll sometimes see these
language versions abbreviated as ES3 and ES5, just as you’ll sometimes see the
name JavaScript abbreviated as JS.

The only version numbers that are relevant are ECMAScript versions 3 or 5.
Version 4 was never released.  Sometimes, however, you’ll also see a JavaScript
version number, such as JavaScript 1.5 or JavaScript 1.8.  These are Mozilla’s
version numbers: version 1.5 is basically ECMAScript 3, and later versions
include nonstandard language extensions.  there are also version numbers
attached to particular JavaScript interpreters or “engines.” Goo- gle calls its
JavaScript interpreter V8, for example, and at the time of this writing the
current version of the V8 engine is 3.0.

*** About JavaScript's Minimal Standard Library
To be useful, every language must have a platform or /standard library/ or API
of functions for performing things like basic input and output.  The core
JavaScript language defines a minimal API for working with /text/, /arrays/,
/dates/, and /regular expressions/ but does not include any /input/ or /output/
functionality.  Input and output (as well as more sophisticated features, such
as /networking/, /storage/, and /graphics/) are the responsibility of the “host
environment” within which JavaScript is embedded.  Usually that host
environment is a web browser, but it can be something else.

*** What This Book Covers
This book covers low-level fundamentals first, and then builds on those to more
advanced and higher-level abstractions.

- [[*Core JavaScript][Part I]] of this book covers the language itself and its minimal built-in API.
- [[*Client-Side JavaScript][Part II]] explains how JavaScript is used in web browsers and covers the
  sprawling browser-based APIs loosely known as “client-side JavaScript.”
- [[*Core API Reference][Part III]] is the reference section for the core API.
- [[*Client-Side JavaScript Reference][Part IV]] is the reference section for client-side JavaScript.

Chapter 1 makes a quick first pass through the core language and the
client-side API, introducing key features that will make it easier to
understand the in-depth treatment in the chapters that follow.

*** An Overview of Core JavaScript
[[*Lexical Structure][Chapter 2, Lexical Structure]], explains things like JavaScript comments,
semicolons, and the Unicode character set.

[[*Types Values and Variables][Chapter 3, Types, Values, and Variables]], explains JavaScript variables and the
values you can assign to those variables.

[[*Expressions and Operators][Chapter 4, Expressions and Operators]] discusses expressions and operators.

- Expression :: a phrase of JavaScript that can be evaluated to produce a
                value.  An expression is something that computes a value but
                doesn’t do anything: it doesn’t alter the program state in any
                way.

  - Operators: produce values


[[*Statements][Chapter 5, Statements]]

- Statement :: Statements, on the other hand, don’t have a value (or don’t have
               a value that we care about), but they do alter the state.

  - Variable declarations: create variables

  - Assignment statements: assign values to variables

  - Control structures (conditionals and loops)


[[*Objects][Chapter 6, Objects]]

[[*Arrays][Chapter 7, Arrays]]

[[*Functions][Chapter 8, Functions]]

- Methods :: When we combine functions with objects, we get methods

[[*Classes and Modules][Chapter 9, Classes and Modules]] covers object-oriented programming in JavaScript
in detail, with lots of examples

[[*JavaScript Subsets and Extensions][Chapter 10, Pattern Matching with Regular Expressions]] explains the regular
expression grammar and demonstrates how to use these “regexps” for textual
pattern matching.

[[*JavaScript Subsets and Extensions][Chapter 11, JavaScript Subsets and Extensions]] covers subsets and extensions of
core JavaScript

[[*Server-Side JavaScript][Chapter 12, Server-Side JavaScript]] introduces two ways to use JavaScript
outside of web browsers.

[[*Client-Side JavaScript][Part Two, Client-Side JavaScript]] is a quick sketch of basic client-side
programming techniques, followed by an in-depth example.

[[*JavaScript in Web Browsers][Chapter 13, JavaScript in Web Browsers]] explains in detail how to put JavaScript
to work in web browsers.

[[*The Window Object][Chapter 14, The Window Object]] explains techniques for scripting the web browser
and covers some important global functions of client-side JavaScript.

[[*Scripting Documents][Chapter 15, Scripting Documents]] shows you how to select particular HTML
elements from within a document, how to set HTML attributes of those elements,
how to alter the content of those elements, and how to add new elements to the
document; i.e., it shows how JavaScript can script the HTML elements that
define web content.

[[*Scripting CSS][Chapter 16, Scripting CSS]] shows how you can use JavaScript with the CSS styles
that define the presentation of that content.

[[*Handling Events][Chapter 17, Handling Events]] explains how you can define and register event
handlers and how the browser invokes them when events occur.

Chapters 15, 16, and 17 explain how you can use JavaScript to script the
content (HTML), presentation (CSS), and behavior (event handling) of web pages.
The APIs described in those chapters are somewhat complex and, until recently,
riddled with browser incompatibilities.  For these reasons, many or most
client-side JavaScript programmers choose to use a client-side library or
framework to simplify their basic programming tasks.  The most popular such
library is *jQuery*.

[[*The jQuery Library][Chapter 19, The jQuery Library]], discusses jQuery, which defines a clever and
easy-to-use API for scripting document content, presentation, and behavior.

The four chapters of Part II described so far have all really been about web
pages.  Four more chapters shift gears to focus on web applications.  These
chapters are not about using web browsers to display documents with scriptable
content, presentation, and behavior.  Instead, they’re about using web browsers
as application platforms, and they describe the APIs that modern browsers
provide to support sophisticated client-side web apps.

[[*Scripted HTTP][Chapter 18, Scripted HTTP]] explains how to make scripted HTTP requests with
JavaScript—a kind of networking API.

[[*Client-Side Storage][Chapter 20, Client-Side Storage]] describes mechanisms for storing data---and
even entire applications---on the client side for use in future browsing
sessions.

[[*Scripted Media and Graphics][Chapter 21, Scripted Media and Graphics]] covers a client-side API for drawing
arbitrary graphics in an HTML =<canvas>= tag.

[[*HTML5 APIs][Chapter 22, HTML5 APIs]] covers an assortment of new web app APIs specified by or
affiliated with HTML5.  Networking, storage, graphics: these are OS-type
services being provided by the web browser, defining a new cross-platform
application environment.

** Core JavaScript
*** Lexical Structure

*** Types Values and Variables

*** Expressions and Operators

*** Statements

*** Objects

*** Arrays

*** Functions

*** Classes and Modules

*** Regular Expressions

*** JavaScript Subsets and Extensions

*** Server-Side JavaScript

** Client-Side JavaScript

*** JavaScript in Web Browsers

*** The Window Object

*** Scripting Documents

*** Scripting CSS

*** Handling Events

*** Scripted HTTP

*** The jQuery Library

*** Client-Side Storage

*** Scripted Media and Graphics

*** HTML5 APIs

** Core API Reference

** Client-Side JavaScript Reference

* Footnotes

[fn:5] Roughly 2000--2010

[fn:1] Except "use strict"

[fn:2] Except leading zeroes in parseInt

[fn:3] Partially supported by all browsers

[fn:4] This page was last modified on 9 October 2011, at 19:22.

* Export Settings                                                  :noexport:

** Options
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t H:6
#+OPTIONS: html-scripts:t html-style:t html5-fancy:t tex:t ':t broken-links:mark

** HTML Export Settings
#+HTML_DOCTYPE: html5
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:Version {{{version}}} Lasted Updated {{{date}}}
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.1 (<a href="https://orgmode.org">Org</a> mode 9.1.14)
#+LATEX_HEADER:

** Macro Definitions
#+macro:heading @@html:<h2>@@$1@@html:</h2>@@
#+macro:subheading @@html:<h3>@@$1@@html:</h3>@@

* Local Variables                                                  :noexport:
# Local Variables:
# time-stamp-pattern:"8/^\\#\\+Date:%:y-%02m-%02d %02H:%02M$"
# eval: (setq org-publish-project-alist '(("ecmascript_262" :base-directory "." :publishing-directory "./public_html" :publishing-function org-html-publish-to-html :section-numbers t :table-of-contents t)))
# End:
